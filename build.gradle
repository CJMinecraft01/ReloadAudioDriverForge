buildscript {
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
    }
    configurations.classpath {
        resolutionStrategy {
            cacheDynamicVersionsFor 10, "seconds"
            cacheChangingModulesFor 0, "seconds"
        }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}

apply from: "buildtools/ColoredOutput.gradle"
apply plugin: 'idea'
apply plugin: 'maven'
apply plugin: 'java'
apply plugin: 'net.minecraftforge.gradle'

//adds the build number to the end of the version string if on a build server
build_number = System.getenv().BUILD_NUMBER

String semver = "${project.version_major}.${project.version_minor}.${project.version_patch}"

version = "${semver}.${build_number}"
group = "cjminecraft.rad" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "ReloadAudioDriver-${project.MCVersion}"

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'

repositories {

}

dependencies {
    minecraft "net.minecraftforge:forge:${project.MCVersion}-${project.ForgeVersion}"
}

minecraft {
    mappings channel: 'snapshot', version: project.MCPMappings
    accessTransformer = file('src/main/resources/META-INF/rad_at.cfg')
    runs {
        client = {
            properties 'forge.logging.markers': 'SCAN,REGISTRIES,REGISTRYDUMP'
            properties 'forge.logging.console.level': 'debug'
            workingDirectory project.file('run').canonicalPath
            source sourceSets.main
        }
        server = {
            properties 'forge.logging.markers': 'SCAN,REGISTRIES,REGISTRYDUMP'
            properties 'forge.logging.console.level': 'debug'
            workingDirectory project.file('run').canonicalPath
            source sourceSets.main
        }
    }
}

jar {
    from sourceSets.main.output.classesDirs
    from sourceSets.main.output.resourcesDir

    manifest {
        attributes([
                "Specification-Title": "Reload Audio Driver",
                "Specification-Vendor": "CJMinecraft01",
                "Specification-Version": "${semver}",
                "Implementation-Title": project.name,
                "Implementation-Version": "${project.version}",
                "Implementation-Vendor" :"CJMinecraft01",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
        ])
    }
}

processResources {
    inputs.property "version", version
    inputs.property "mcversion", project.MCVersion
    from(sourceSets.main.resources.srcDirs) {
        include 'mods.toml'
        expand 'version': version, 'mcversion': project.MCVersion
    }
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mods.toml'
    }
}
